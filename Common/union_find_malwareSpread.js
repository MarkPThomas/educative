class UnionFind {
  constructor(n) {
    this.parents = Array.from({ length: n }, (_, i) => i)
    this.sizes = Array(n).fill(1);
  }
  // Function to find which subset a particular element belongs.
  find(i) {
    while (i != this.parents[i]) {
      this.parents[i] = this.find(this.parents[i]);
      i = this.parents[i];
    }
    return i
  }

  // Function to join two subsets into a single subset.
  union(x, y) {
    let rootX = this.find(x);
    let rootY = this.find(y);

    if (rootX == rootY) {
      return;
    }

    let r = this.sorted(rootX, rootY, this.sizes);
    let small = r[0];
    let big = r[1];
    this.parents[small] = big;
    this.sizes[big] += this.sizes[small];

  }

  sorted(x, y, sizes) {
    let mapping = {};
    mapping[sizes[x]] = x;
    mapping[sizes[y]] = y;
    let tempSizes = [sizes[x], sizes[y]]

    if (sizes[x] == sizes[y]) {
      return [x, y];
    } else {
      tempSizes.sort(function (a, b) { return a - b });
      return [mapping[tempSizes[0]], mapping[tempSizes[1]]];
    }
  }
}

export default UnionFind